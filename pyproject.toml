[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "airflow-provider-aiida"
authors = [
    { name = "AiiDA Team", email = "developers@aiida.net" },
]
description = "The Apache Airflow provider for AiiDA"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: Apache Airflow",
    "Framework :: Apache Airflow :: Provider",
    "Programming Language :: Python :: 3.11",
]
dynamic = [
    "version"
]
requires-python = ">=3.11.0,<3.12.0"
dependencies = [
    "apache-airflow>=3.1.0",
    "aiida-core @ git+https://github.com/aiidateam/aiida-core@airflow-dev"
]

[project.optional-dependencies]
tests = [
    "pytest>=7.0",
    "pytest-mock>=3.10",
]

[project.urls]
Homepage = "..." # TODO
Source = "..." # TODO

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.entry-points.apache_airflow_provider]
provider_info = "airflow_provider_aiida.__init__:get_provider_info"

[project.entry-points."airflow.plugins"]
aiida_dag_run_listener = "airflow_provider_aiida.plugins.aiida_dag_run_listener:AiidaDagRunListener"
aiida_ui = "airflow_provider_aiida.plugins.aiida_ui:AiidaUI"

[project.entry-points."aiida.dags"]
aiida-standard = "airflow_provider_aiida.example_dags"

[tool.hatch.version]
path = "src/airflow_provider_aiida/__init__.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.default]
python = "3.11"

[tool.hatch.envs.hatch-test]
default-args = []
extra-dependencies = [
    "pytest-asyncio>=0.21.0",
]

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.11"]

[tool.hatch.envs.test]
python = "3.11"
dependencies = [
    "pytest>=7.0",
    "pytest-mock>=3.10",
    "pytest-asyncio>=0.21.0",
]

[tool.hatch.envs.test.scripts]
run = "pytest {args:tests}"
cov = "pytest --cov-report=term-missing --cov=airflow_provider_aiida {args:tests}"

[tool.setuptools]
include-package-data = false

[tool.setuptools.dynamic]
version = { attr = "aiida_provider.__version__" }

[tool.setuptools.packages.find]
exclude = [
    "*tests.*",
    "*tests"
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
